{"version":3,"sources":["db.js","index.js","../node_modules/express/lib sync","routes/advanced.js","routes/users.js","routes/artists.js","routes/songs.js","routes/genres.js","routes/matchmaking.js","routes/song_genre.js","routes/artist_genre.js","routes/artist_song.js","routes/user_genre.js","routes/user_song.js","routes/user_artist.js"],"names":["db","require","createConnection","host","user","password","database","connect","err","module","exports","express","bodyParser","app","cors","use","urlencoded","extended","json","get","req","response","send","advanced","users","artists","songs","genres","matchmaking","song_genre","artist_genre","artist_song","user_genre","user_song","user_artist","listen","console","log","webpackEmptyContext","e","Error","code","keys","resolve","id","routes","Router","queryDb","query","result","error","status","length","limit","params","firstNameQuery","lastNameQuery","emailQuery","whereClause","undefined","Boolean","userSelectQuery","isNaN","put","body","userId","firstName","first_name","lastName","last_name","email","dob","post","delete","nameQuery","q","artistSelectQuery","name","popularity","artistId","songSelectQuery","duration","date","songId","genreId","genreSelectQuery","userId1","userId2","user1IdQuery","user2IdQuery","selectQuery","songIdQuery","genreIdQuery","artistIdQuery","userIdQuery","user_id","genre_id","song_id","artist_id"],"mappings":"sFAAA,IAEIA,EAFUC,EAAQ,KAEPC,iBAAiB,CAC9BC,KAAM,iBACNC,KAAM,OACNC,SAAU,mBACVC,SAAU,WAGZN,EAAGO,SAAQ,SAAUC,GACnB,GAAIA,EAAK,MAAMA,KAGjBC,EAAOC,QAAUV,G,oBCbjB,IAAMW,EAAUV,EAAQ,GAClBW,EAAaX,EAAQ,IACrBY,EAAMF,IACNG,EAAOb,EAAQ,KAErBY,EAAIE,IAAID,KACRD,EAAIE,IAAIH,EAAWI,WAAW,CAAEC,UAAU,KAC1CJ,EAAIE,IAAIJ,EAAQO,QAEhBL,EAAIM,IAAI,aAAa,SAACC,EAAKC,GACzBA,EAASC,KAAK,WAGhB,IAAMC,EAAWtB,EAAQ,KACnBuB,EAAQvB,EAAQ,KAChBwB,EAAUxB,EAAQ,KAClByB,EAAQzB,EAAQ,KAChB0B,EAAS1B,EAAQ,KACjB2B,EAAc3B,EAAQ,KAEtB4B,EAAa5B,EAAQ,KACrB6B,EAAe7B,EAAQ,KACvB8B,EAAc9B,EAAQ,KACtB+B,EAAa/B,EAAQ,KACrBgC,EAAYhC,EAAQ,KACpBiC,EAAcjC,EAAQ,KAE5BY,EAAIE,IAAI,gBAAiBQ,GACzBV,EAAIE,IAAI,aAAcS,GACtBX,EAAIE,IAAI,eAAgBU,GACxBZ,EAAIE,IAAI,aAAcW,GACtBb,EAAIE,IAAI,cAAeY,GACvBd,EAAIE,IAAI,mBAAoBa,GAE5Bf,EAAIE,IAAI,kBAAmBc,GAC3BhB,EAAIE,IAAI,oBAAqBe,GAC7BjB,EAAIE,IAAI,mBAAoBgB,GAC5BlB,EAAIE,IAAI,kBAAmBiB,GAC3BnB,EAAIE,IAAI,iBAAkBkB,GAC1BpB,EAAIE,IAAI,mBAAoBmB,GAE5BrB,EAAIsB,OAAO,MAAM,WACfC,QAAQC,IAAI,4B,sHC1Cd,SAASC,EAAoBlB,GAC5B,IAAImB,EAAI,IAAIC,MAAM,uBAAyBpB,EAAM,KAEjD,MADAmB,EAAEE,KAAO,mBACHF,EAEPD,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9B7B,EAAOC,QAAU4B,EACjBA,EAAoBM,GAAK,K,oQCRzB,IAAMC,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAOnB,SAAS8C,EAAQC,EAAO3B,GACtBrB,EAAGgD,MAAMA,GAAO,SAACxC,EAAKyC,GAChBzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,aACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,OAahCJ,EAAO1B,IAAI,aAAa,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,sCAEZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MAQzBN,EAPW,oNAIDM,EAJC,QAOIhC,MASjBwB,EAAO1B,IAAI,aAAa,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,sCAEZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MAazBN,EAZW,wNASDM,EATC,QAYIhC,MAQjBwB,EAAO1B,IAAI,aAAa,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,sCAEZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MAYzBN,EAXW,wOAQDM,EARC,QAWIhC,MAQjBwB,EAAO1B,IAAI,aAAa,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,sCAEZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MAYzBN,EAXW,+TAQDM,EARC,QAWIhC,MAGjBZ,EAAOC,QAAUmC,G,oBCjHjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUlB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC3Be,QAAQC,IAAI,iCACZ,IAAMkB,EAAiBnC,EAAI4B,MAAMO,eAC3BC,EAAgBpC,EAAI4B,MAAMQ,cAC1BC,EAAarC,EAAI4B,MAAMS,WAEzBC,EAAc,QACKC,IAAnBJ,IACFG,GAAW,kCAA+BH,EAA/B,YAESI,IAAlBH,IACFE,GAAW,UACTE,QAAQF,GAAe,MAAQ,QADtB,6BAEUF,EAFV,YAIMG,IAAfF,IACFC,GAAW,UACTE,QAAQF,GAAe,MAAQ,QADtB,wBAEKD,EAFL,MAKb,IAAMJ,EAAQjC,EAAIkC,OAAOD,MACnBQ,EAAe,qDAGjBH,EAHiB,4CAKjBE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALpC,UAQrBjB,QAAQC,IAAIwB,GACZ7D,EAAGgD,MAAMa,GAAiB,SAACrD,EAAKyC,GAC1BzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAU/BJ,EAAOkB,IAAI,YAAY,SAAC3C,EAAKC,GAC5Be,QAAQC,IAAI,kCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,IAAMC,EAAS7C,EAAIkC,OAAOW,OAC1B,EAAmE7C,EAAI4C,KAAnDE,EAApB,EAAQC,WAAkCC,EAA1C,EAA+BC,UAAqBC,EAApD,EAAoDA,MAAOC,EAA3D,EAA2DA,IAI3DvE,EAAGgD,MADD,mGAGA,CAACkB,EAAWE,EAAUE,EAAOC,EAAKN,IAClC,SAACzD,EAAKyC,GACAzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,eAAoB4B,EAApB,0BACA7B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAWjCJ,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACtBe,QAAQC,IAAI,4BACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAAmE5C,EAAI4C,KAAnDE,EAApB,EAAQC,WAAkCC,EAA1C,EAA+BC,UAAqBC,EAApD,EAAoDA,MAAOC,EAA3D,EAA2DA,IAI3DvE,EAAGgD,MADD,kFAGA,CAACkB,EAAWE,EAAUE,EAAOC,IAC7B,SAAC/D,EAAKyC,GACAzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUlCJ,EAAO4B,OAAO,YAAY,SAACrD,EAAKC,GAC9Be,QAAQC,IAAI,qCACZ,IAAM4B,EAAS7C,EAAIkC,OAAOW,OAG1BjE,EAAGgD,MADqB,wCACEiB,GAAQ,SAACzD,EAAKyC,GAClCzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBCjIjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUlB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC3Be,QAAQC,IAAI,mCACZ,IAAMqC,EAAYtD,EAAI4B,MAAM2B,EACtBtB,EAAQjC,EAAIkC,OAAOD,MACnBuB,EAAiB,kEAGDjB,IAAde,EAA0B,GAA1B,4BAAoDA,EAApD,MAHe,uDAKfd,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALtC,UAOvBrD,EAAGgD,MAAM4B,GAAmB,SAACpE,EAAKyC,GAC5BzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,aACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUhCJ,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACrBe,QAAQC,IAAI,8BACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAA6B5C,EAAI4C,KAAzBa,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAId9E,EAAGgD,MADD,2DAC0B,CAAC6B,EAAMC,IAAa,SAACtE,EAAKyC,GAChDzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUhCJ,EAAOkB,IAAI,cAAc,SAAC3C,EAAKC,GAC7Be,QAAQC,IAAI,sCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,IAAMe,EAAW3D,EAAIkC,OAAOyB,SAC5B,EAA6B3D,EAAI4C,KAAzBa,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAId9E,EAAGgD,MADD,0EAC0B,CAAC6B,EAAMC,EAAYC,IAAW,SAACvE,EAAKyC,GAC1DzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,iBAAsB0C,EAAtB,0BACA3C,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAShCJ,EAAO4B,OAAO,cAAc,SAACrD,EAAKC,GAChCe,QAAQC,IAAI,yCACZ,IAAM0C,EAAW3D,EAAIkC,OAAOyB,SAG5B/E,EAAGgD,MADuB,4CACE+B,GAAU,SAACvE,EAAKyC,GACtCzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBCrGjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAEnB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC1Be,QAAQC,IAAI,iCACZ,IAAMqC,EAAYtD,EAAI4B,MAAM2B,EACtBtB,EAAQjC,EAAIkC,OAAOD,MACnB2B,EAAe,gEAGCrB,IAAde,EAA0B,GAA1B,4BAAoDA,EAApD,MAHa,iDAKbd,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAOrBrD,EAAGgD,MAAMgC,GAAiB,SAACxE,EAAKyC,GAC1BzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAWhCJ,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACrBe,QAAQC,IAAI,yDACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAA+B5C,EAAI4C,KAA5Ba,EAAP,EAAOA,KAAMI,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,KAIvBlF,EAAGgD,MADD,mEACwB,CAAC6B,EAAMI,EAAUC,IAAO,SAAC1E,EAAKyC,GAClDzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUhCJ,EAAOkB,IAAI,YAAY,SAAC3C,EAAKC,GAC3Be,QAAQC,IAAI,kCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,IAAMmB,EAAS/D,EAAIkC,OAAO6B,OAC1B,EAA+B/D,EAAI4C,KAA5Ba,EAAP,EAAOA,KAAMI,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,KAIvBlF,EAAGgD,MADD,gFACwB,CAAC6B,EAAMI,EAAUC,EAAMC,IAAS,SAAC3E,EAAKyC,GAC1DzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,eAAoB8C,EAApB,0BACA/C,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAShCJ,EAAO4B,OAAO,YAAY,SAACrD,EAAKC,GAC9Be,QAAQC,IAAI,qCACZ,IAAM8C,EAAS/D,EAAIkC,OAAO6B,OAG1BnF,EAAGgD,MADqB,wCACEmC,GAAQ,SAAC3E,EAAKyC,GAClCzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBC9FjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAGnB4C,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACrBe,QAAQC,IAAI,0DACZD,QAAQC,IAAIjB,EAAI4C,MAChB,IAAQa,EAASzD,EAAI4C,KAAba,KAGR7E,EAAGgD,MADsB,0CACE6B,GAAM,SAACrE,EAAKyC,GACjCzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAMhCJ,EAAO4B,OAAO,aAAa,SAACrD,EAAKC,GAC/Be,QAAQC,IAAI,uCACZ,IAAM+C,EAAUhE,EAAIkC,OAAO8B,QAG3BpF,EAAGgD,MADsB,0CACEoC,GAAS,SAAC5E,EAAKyC,GACpCzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAMhCJ,EAAOkB,IAAI,aAAa,SAAC3C,EAAKC,GAC5Be,QAAQC,IAAI,oCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,IAAMoB,EAAUhE,EAAIkC,OAAO8B,QACnBP,EAASzD,EAAI4C,KAAba,KAIR7E,EAAGgD,MADD,sDACyB,CAAC6B,EAAMO,IAAU,SAAC5E,EAAKyC,GAC5CzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,gBAAqB+C,EAArB,0BACAhD,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAMhCJ,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC1Be,QAAQC,IAAI,kCACZ,IAAMqC,EAAYtD,EAAI4B,MAAM2B,EAC5BvC,QAAQC,IAAI,4BAA6BqC,GACzC,IAAMrB,EAAQjC,EAAIkC,OAAOD,MACnBgC,EAAgB,iEAGA1B,IAAde,EAA0B,GAA1B,4BAAoDA,EAApD,MAHc,sDAKdd,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALvC,UAOtBrD,EAAGgD,MAAMqC,GAAkB,SAAC7E,EAAKyC,GAC3BzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,YACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBCnFjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAOnB,SAAS8C,EAAQC,EAAO3B,GACtBrB,EAAGgD,MAAMA,GAAO,SAACxC,EAAKyC,GAChBzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,aACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,OAUhCJ,EAAO1B,IAAI,4BAA4B,SAACC,EAAKC,GAC3Ce,QAAQC,IAAI,uCACZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MACnBY,EAAS7C,EAAIkC,OAAOW,OAmB1BlB,EAjBW,2VAQ0BkB,EAR1B,wHAYaA,EAZb,+DAcDZ,EAdC,UAiBIhC,MAQjBwB,EAAO1B,IAAI,6BAA6B,SAACC,EAAKC,GAC5Ce,QAAQC,IAAI,wCACZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MACnBY,EAAS7C,EAAIkC,OAAOW,OAmB1BlB,EAjBW,sYAQ+BkB,EAR/B,wIAYiBA,EAZjB,qEAcGZ,EAdH,UAiBIhC,MAQjBwB,EAAO1B,IAAI,8BAA8B,SAACC,EAAKC,GAC7Ce,QAAQC,IAAI,yCACZ,IAAMgB,EAAQjC,EAAIkC,OAAOD,MACnBY,EAAS7C,EAAIkC,OAAOW,OAoB1BlB,EAlBW,2eASgCkB,EAThC,wIAaiBA,EAbjB,sEAeGZ,EAfH,UAkBIhC,MAYjBwB,EAAO1B,IAAI,oCAAoC,SAACC,EAAKC,GACnDe,QAAQC,IAAI,+CACZ,IAAMiD,EAAUlE,EAAIkC,OAAOgC,QACrBC,EAAUnE,EAAIkC,OAAOiC,QAO3BxC,EAJW,+BACQuC,EADR,aACoBC,EADpB,YAIIlE,MAWhBwB,EAAO1B,IAAI,qBAAqB,SAACC,EAAKC,GACrCe,QAAQC,IAAI,uCACZ,IAAMmD,EAAepE,EAAI4B,MAAMwC,aACzBC,EAAerE,EAAI4B,MAAMyC,aAE3B/B,EAAc,QACGC,IAAjB6B,IACF9B,GAAW,gCAA6B8B,EAA7B,WAEQ7B,IAAjB8B,IACF/B,GAAW,UACTE,QAAQF,GAAe,MAAQ,QADtB,4BAES+B,EAFT,MAKb,IAAMpC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,yDAGbhC,EAHa,qDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,aACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAShCJ,EAAO2B,KAAK,cAAc,SAACpD,EAAKC,GAC9Be,QAAQC,IAAI,+BACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAA6B5C,EAAI4C,KAAzBsB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAIjBvF,EAAGgD,MADD,kEACwB,CAACsC,EAASC,IAAU,SAAC/E,EAAKyC,GAC9CzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAShCJ,EAAO4B,OAAO,cAAc,SAACrD,EAAKC,GAChCe,QAAQC,IAAI,iCACZ,MAA6BjB,EAAI4C,KAAzBsB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAIjBvF,EAAGgD,MADD,kEACwB,CAACsC,EAASC,IAAU,SAAC/E,EAAKyC,GAC9CzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBC5NjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUlB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,sCACZ,IAAMsD,EAAcvE,EAAI4B,MAAM2C,YACxBC,EAAexE,EAAI4B,MAAM4C,aAE3BlC,EAAc,QACEC,IAAhBgC,IACFjC,GAAW,8BAA2BiC,EAA3B,WAEQhC,IAAjBiC,IACFlC,GAAW,UACZE,QAAQF,GAAe,MAAQ,QADnB,2BAEQkC,EAFR,MAKb,IAAMvC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,0DAGbhC,EAHa,sDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACL4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAK1BxC,EAAOC,QAAUmC,G,oBC/CnB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUlB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,wCACZ,IAAMwD,EAAgBzE,EAAI4B,MAAM6C,cAC1BD,EAAexE,EAAI4B,MAAM4C,aAE3BlC,EAAc,QACIC,IAAlBkC,IACFnC,GAAW,gCAA6BmC,EAA7B,WAEQlC,IAAjBiC,IACFlC,GAAW,UACZE,QAAQF,GAAe,MAAQ,QADnB,2BAEQkC,EAFR,MAKb,IAAMvC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,4DAGbhC,EAHa,wDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACL4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAK1BxC,EAAOC,QAAUmC,G,oBC/CnB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUlB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC5Be,QAAQC,IAAI,uCACZ,IAAMwD,EAAgBzE,EAAI4B,MAAM6C,cAC1BF,EAAcvE,EAAI4B,MAAM2C,YAE1BjC,EAAc,QACIC,IAAlBkC,IACFnC,GAAW,gCAA6BmC,EAA7B,WAEOlC,IAAhBgC,IACFjC,GAAW,UACZE,QAAQF,GAAe,MAAQ,QADnB,0BAEOiC,EAFP,MAKb,IAAMtC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,2DAGbhC,EAHa,uDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACL4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAK1BxC,EAAOC,QAAUmC,G,oBC/CnB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUnB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC1Be,QAAQC,IAAI,sCACZ,IAAMyD,EAAc1E,EAAI4B,MAAM8C,YACxBF,EAAexE,EAAI4B,MAAM4C,aAE3BlC,EAAc,QACEC,IAAhBmC,IACFpC,GAAW,8BAA2BoC,EAA3B,WAEQnC,IAAjBiC,IACFlC,GAAW,UACTE,QAAQF,GAAe,MAAQ,QADtB,2BAEQkC,EAFR,MAKb,IAAMvC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,0DAGbhC,EAHa,sDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAW/BJ,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACtBe,QAAQC,IAAI,iCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAA+C5C,EAAI4C,KAAlCC,EAAjB,EAAQ8B,QAA2BX,EAAnC,EAAyBY,SAIzBhG,EAAGgD,MADD,+DAGA,CAACiB,EAAQmB,IACT,SAAC5E,EAAKyC,GACAzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUlCJ,EAAO4B,OAAO,KAAK,SAACrD,EAAKC,GACvBe,QAAQC,IAAI,mCACZ,IAAMyD,EAAc1E,EAAI4B,MAAM8C,YACxBF,EAAexE,EAAI4B,MAAM4C,aAE/B,QAAoBjC,IAAhBmC,QAA8CnC,IAAjBiC,EAChC,OAAOvE,EAAS8B,OAAO,KAAK7B,OAI7BtB,EAAGgD,MAD0B,+DAG5B,CAAC8C,EAAaF,IACd,SAACpF,EAAKyC,GACDzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBCvGjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUnB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC1Be,QAAQC,IAAI,qCACZ,IAAMyD,EAAc1E,EAAI4B,MAAM8C,YACxBH,EAAcvE,EAAI4B,MAAM2C,YAE1BjC,EAAc,QACEC,IAAhBmC,IACFpC,GAAW,8BAA2BoC,EAA3B,WAEOnC,IAAhBgC,IACFjC,GAAW,UACTE,QAAQF,GAAe,MAAQ,QADtB,0BAEOiC,EAFP,MAKb,IAAMtC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,yDAGbhC,EAHa,qDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAW/BJ,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACtBe,QAAQC,IAAI,gCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAA6C5C,EAAI4C,KAAhCC,EAAjB,EAAQ8B,QAA0BZ,EAAlC,EAAyBc,QAIzBjG,EAAGgD,MADD,6DAGA,CAACiB,EAAQkB,IACT,SAAC3E,EAAKyC,GACAzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUlCJ,EAAO4B,OAAO,KAAK,SAACrD,EAAKC,GACvBe,QAAQC,IAAI,kCACZ,IAAMyD,EAAc1E,EAAI4B,MAAM8C,YACxBH,EAAcvE,EAAI4B,MAAM2C,YAE9B,QAAoBhC,IAAhBmC,QAA6CnC,IAAhBgC,EAChC,OAAOtE,EAAS8B,OAAO,KAAK7B,OAI7BtB,EAAGgD,MADyB,6DAG3B,CAAC8C,EAAaH,IACd,SAACnF,EAAKyC,GACDzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,G,oBCvGjB,IAAMA,EAAS5C,EAAQ,GAAW6C,SAC5B9C,EAAKC,EAAQ,IAUnB4C,EAAO1B,IAAI,WAAW,SAACC,EAAKC,GAC1Be,QAAQC,IAAI,uCACZ,IAAMyD,EAAc1E,EAAI4B,MAAM8C,YACxBD,EAAgBzE,EAAI4B,MAAM6C,cAE5BnC,EAAc,QACEC,IAAhBmC,IACFpC,GAAW,8BAA2BoC,EAA3B,WAESnC,IAAlBkC,IACFnC,GAAW,UACTE,QAAQF,GAAe,MAAQ,QADtB,4BAESmC,EAFT,MAKb,IAAMxC,EAAQjC,EAAIkC,OAAOD,MACnBqC,EAAW,2DAGbhC,EAHa,uDAKbE,QAAQP,KAAWS,MAAMT,GAAzB,gBAA2CA,GAAU,GALxC,UAQjBjB,QAAQC,IAAIqD,GACZ1F,EAAGgD,MAAM0C,GAAa,SAAClF,EAAKyC,GACtBzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAR,wBAA6BY,EAAOG,OAApC,WACA/B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAW/BJ,EAAO2B,KAAK,KAAK,SAACpD,EAAKC,GACtBe,QAAQC,IAAI,kCACZD,QAAQC,IAAIjB,EAAI4C,MAChB,MAAiD5C,EAAI4C,KAApCC,EAAjB,EAAQ8B,QAA4BhB,EAApC,EAAyBmB,UAIzBlG,EAAGgD,MADD,iEAGA,CAACiB,EAAQc,IACT,SAACvE,EAAKyC,GACAzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAUlCJ,EAAO4B,OAAO,KAAK,SAACrD,EAAKC,GACvBe,QAAQC,IAAI,oCACZ,IAAMyD,EAAc1E,EAAI4B,MAAM8C,YACxBD,EAAgBzE,EAAI4B,MAAM6C,cAEhC,QAAoBlC,IAAhBmC,QAA+CnC,IAAlBkC,EAChC,OAAOxE,EAAS8B,OAAO,KAAK7B,OAI7BtB,EAAGgD,MAD2B,iEAG7B,CAAC8C,EAAaD,IACd,SAACrF,EAAKyC,GACDzC,GACF4B,QAAQc,MAAM1C,GACda,EAAS8B,OAAO,KAAK7B,KAAKd,KAE1B4B,QAAQC,IAAIY,GACZ5B,EAAS8B,OAAO,KAAK7B,KAAK2B,UAKhCxC,EAAOC,QAAUmC,I","file":"static/js/main.6ca0584b.chunk.js","sourcesContent":["const mysql = require('mysql');\n\nvar db = mysql.createConnection({\n  host: '35.223.243.139',\n  user: 'root',\n  password: '6hqIAjcwnhDdsC3x',\n  database: 'tunify',\n});\n\ndb.connect(function (err) {\n  if (err) throw err;\n});\n\nmodule.exports = db;","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst app = express();\r\nconst cors = require('cors');\r\n\r\napp.use(cors());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.json());\r\n\r\napp.get('/api/ping', (req, response) => {\r\n  response.send('pong');\r\n});\r\n\r\nconst advanced = require('./routes/advanced');\r\nconst users = require('./routes/users');\r\nconst artists = require('./routes/artists');\r\nconst songs = require('./routes/songs');\r\nconst genres = require('./routes/genres');\r\nconst matchmaking = require('./routes/matchmaking');\r\n\r\nconst song_genre = require('./routes/song_genre');\r\nconst artist_genre = require('./routes/artist_genre');\r\nconst artist_song = require('./routes/artist_song');\r\nconst user_genre = require('./routes/user_genre');\r\nconst user_song = require('./routes/user_song');\r\nconst user_artist = require('./routes/user_artist');\r\n\r\napp.use('/api/advanced', advanced);\r\napp.use('/api/users', users);\r\napp.use('/api/artists', artists);\r\napp.use('/api/songs', songs);\r\napp.use('/api/genres', genres);\r\napp.use('/api/matchmaking', matchmaking);\r\n\r\napp.use('/api/song_genre', song_genre);\r\napp.use('/api/artist_genre', artist_genre);\r\napp.use('/api/artist_song', artist_song);\r\napp.use('/api/user_genre', user_genre);\r\napp.use('/api/user_song', user_song);\r\napp.use('/api/user_artist', user_artist);\r\n\r\napp.listen(3002, () => {\r\n  console.log('running on port 3002');\r\n});\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 247;","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * Queries MySQL database\n * @param {String} query SQL query\n * @param {Object} response response to send to client\n */\nfunction queryDb(query, response) {\n  db.query(query, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} results`);\n      response.status(200).send(result);\n    }\n  });\n}\n\n/**\n * GET /api/advanced/1/:limit\n *\n * Birthday Tracks:\n * returns name of song, user first and last name, and user date\n * of birth of users that had a birth date on the same day as the\n * release date of a song\n */\nroutes.get('/1/:limit', (req, response) => {\n  console.log('GET /api/advanced/1/:limit invoked');\n\n  const limit = req.params.limit;\n  const query = `\n    SELECT DISTINCT Song.name, User.first_name, User.last_name, User.dob\n    FROM Song JOIN User ON Song.date = User.dob\n    GROUP BY Song.name, User.first_name, User.last_name, User.dob\n    LIMIT ${limit}\n  `;\n\n  queryDb(query, response);\n});\n\n/**\n * GET /api/advanced/2/:limit\n * \n * 21st Century Songs:\n * Returns tracks from 21st century\n */\nroutes.get('/2/:limit', (req, response) => {\n  console.log('GET /api/advanced/2/:limit invoked');\n\n  const limit = req.params.limit;\n  const query = `\n    SELECT x.track, x.year\n    FROM (\n      SELECT name AS track, date AS year\n      FROM Song\n      WHERE date >= 20000101 \n    ) x\n    GROUP BY x.track, x.year\n    ORDER BY x.year ASC\n    LIMIT ${limit}\n  `;\n\n  queryDb(query, response);\n});\n\n/**\n * GET /api/advanced/3/:limit\n * \n * Top 50% Artist Popularity By Percentage\n */\nroutes.get('/3/:limit', (req, response) => {\n  console.log('GET /api/advanced/3/:limit invoked');\n\n  const limit = req.params.limit;\n  const query = `\n    SELECT x.artName, x.artPop\n    FROM (\n      SELECT Artist.name as artName, Artist.popularity as artPop\n      FROM Artist \n      WHERE Artist.popularity >= 50\n    ) x\n    GROUP BY x.artName, x.artPop\n    LIMIT ${limit}\n  `;\n\n  queryDb(query, response);\n});\n\n/**\n * GET /api/advanced/4/:limit\n * \n * Users with the Same First Name as an Artist with Popularity less than 50\n */\nroutes.get('/4/:limit', (req, response) => {\n  console.log('GET /api/advanced/4/:limit invoked');\n\n  const limit = req.params.limit;\n  const query = `\n    SELECT DISTINCT User.first_name, User.last_name, pa.name\n    FROM User, (\n      SELECT * FROM Artist\n      where LENGTH(Artist.name) <= 10\n    ) pa\n    WHERE CONCAT(User.first_name, ' ') = LEFT(pa.name, LENGTH(User.first_name) + 1)\n    GROUP BY User.first_name, User.last_name, pa.name\n    LIMIT ${limit}\n  `;\n\n  queryDb(query, response);\n});\n\nmodule.exports = routes;\n","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/users/:limit\n * Returns array of users limited by the parameter\n * ex. /api/users/30\n *\n * Including a non-number as limit should(?) return ALL users\n * ex. /api/users/all\n */\n routes.get('/:limit', (req, response) => {\n  console.log('GET /api/users/:limit invoked');\n  const firstNameQuery = req.query.firstNameQuery;\n  const lastNameQuery = req.query.lastNameQuery;\n  const emailQuery = req.query.emailQuery;\n\n  let whereClause = '';\n  if (firstNameQuery !== undefined) {\n    whereClause += `WHERE first_name LIKE '%${firstNameQuery}%'`;\n  }\n  if (lastNameQuery !== undefined) {\n    whereClause += `${\n      Boolean(whereClause) ? 'AND' : 'WHERE'\n    } last_name LIKE '%${lastNameQuery}%'`;\n  }\n  if (emailQuery !== undefined) {\n    whereClause += `${\n      Boolean(whereClause) ? 'AND' : 'WHERE'\n    } email LIKE '${emailQuery}'`;\n  }\n\n  const limit = req.params.limit;\n  const userSelectQuery = `\n\t\t  SELECT * \n\t\t  FROM User \n\t\t  ${whereClause}\n\t\t  ORDER BY dob DESC\n\t\t  ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t  `;\n  \n  console.log(userSelectQuery);\n  db.query(userSelectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} users`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * PUT /api/users/:artistId\n * Updates user with given id\n * Request body must have a `first_name`, 'last_name', 'email', and `dob`\n */\n routes.put('/:userId', (req, response) => {\n  console.log('PUT /api/users/:userId invoked');\n  console.log(req.body);\n  const userId = req.params.userId;\n  const { first_name: firstName, last_name: lastName, email, dob } = req.body;\n\n  const userUpdateQuery =\n    'UPDATE `User` SET `first_name` = ?, `last_name` = ?, `email` = ?, `dob` = ? WHERE `user_id` = ? ';\n  db.query(\n    userUpdateQuery,\n    [firstName, lastName, email, dob, userId],\n    (err, result) => {\n      if (err) {\n        console.error(err);\n        response.status(500).send(err);\n      } else {\n        console.log(`User ${userId} successfully updated`);\n        console.log(result);\n        response.status(200).send(result);\n      }\n    }\n  );\n});\n\n/**\n * POST /api/users\n * Inserts user into User table using values in request body\n * Request body must have a `first_name`, 'last_name', 'email', and 'dob'\n */\n routes.post('/', (req, response) => {\n  console.log('POST /api/users/ invoked');\n  console.log(req.body);\n  const { first_name: firstName, last_name: lastName, email, dob } = req.body;\n\n  const userInsertQuery =\n    'INSERT INTO `User` (`first_name`, `last_name`, `email`, `dob`) VALUES (?,?,?,?)';\n  db.query(\n    userInsertQuery,\n    [firstName, lastName, email, dob],\n    (err, result) => {\n      if (err) {\n        console.error(err);\n        response.status(500).send(err);\n      } else {\n        console.log(result);\n        response.status(200).send(result);\n      }\n    }\n  );\n});\n\n/**\n * DELETE /api/user/userId\n * Deletes the user from User table with specified id\n */\nroutes.delete('/:userId', (req, response) => {\n  console.log('DELETE /api/users/:userId invoked');\n  const userId = req.params.userId;\n\n  const userDeleteQuery = 'DELETE FROM `User` WHERE `user_id`= ?';\n  db.query(userDeleteQuery, userId, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;\n","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/artists/:limit\n * Returns array of artists limited by the parameter\n * ex. /api/artists/30\n *\n * Including a non-number as limit should(?) return ALL artists\n * ex. /api/artists/all\n */\n routes.get('/:limit', (req, response) => {\n  console.log('GET /api/artists/:limit invoked');\n  const nameQuery = req.query.q;\n  const limit = req.params.limit;\n  const artistSelectQuery = `\n        SELECT * \n        FROM Artist \n        ${nameQuery === undefined ? '' : `WHERE name LIKE '%${nameQuery}%'`}\n        ORDER BY popularity DESC\n        ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n    `;\n  db.query(artistSelectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} artists`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * POST /api/artists\n * Inserts artist into Artist table using values in request body\n * Request body must have a `name` and `popularity`\n */\nroutes.post('/', (req, response) => {\n  console.log('POST /api/artists/ invoked');\n  console.log(req.body);\n  const { name, popularity } = req.body;\n\n  const artistInsertQuery =\n    'INSERT INTO `Artist` (`name`, `popularity`) VALUES (?,?)';\n  db.query(artistInsertQuery, [name, popularity], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * PUT /api/artists/:artistId\n * Updates artist with given id\n * Request body must have a `name` and `popularity`\n */\nroutes.put('/:artistId', (req, response) => {\n  console.log('PUT /api/artists/:artistId invoked');\n  console.log(req.body);\n  const artistId = req.params.artistId;\n  const { name, popularity } = req.body;\n\n  const artistUpdateQuery =\n    'UPDATE `Artist` SET `name` = ?, `popularity` = ? WHERE `artist_id` = ? ';\n  db.query(artistUpdateQuery, [name, popularity, artistId], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Artist ${artistId} successfully updated`);\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * DELETE /api/artist/artistId\n * Deletes the artist from Artist table with specified id\n */\nroutes.delete('/:artistId', (req, response) => {\n  console.log('DELETE /api/artists/:artistId invoked');\n  const artistId = req.params.artistId;\n\n  const artistDeleteQuery = 'DELETE FROM `Artist` WHERE `artist_id`= ?';\n  db.query(artistDeleteQuery, artistId, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;","const routes = require('express').Router();\nconst db = require('../db');\n\nroutes.get('/:limit', (req, response) => {\n  console.log('GET /api/songs/:limit invoked');\n  const nameQuery = req.query.q;\n  const limit = req.params.limit;\n  const songSelectQuery = `\n        SELECT * \n        FROM Song \n        ${nameQuery === undefined ? '' : `WHERE name LIKE '%${nameQuery}%'`}\n        ORDER BY name DESC\n        ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n    `;\n  db.query(songSelectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} songs`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n\n/**\n * POST /api/songs\n * Inserts song into Song table using values in request body\n * Request body must have a `name`, `genre_id`, `artist_id`, `date`\n */\nroutes.post('/', (req, response) => {\n  console.log('POST /api/songs/ invoked: adding a new songs to table');\n  console.log(req.body);\n  const {name, duration, date} = req.body;\n\n  const songInsertQuery =\n    'INSERT INTO `Song` (`name`, `duration`, `date`) VALUES (?, ?, ?)';\n  db.query(songInsertQuery, [name, duration, date], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * PUT /api/songs/:songId\n * Updates song with given id\n * Request body must have a `name`, `genre_id`, `artist_id`, `date`\n */\nroutes.put('/:songId', (req, response) => {\n  console.log('PUT /api/songs/:songId invoked');\n  console.log(req.body);\n  const songId = req.params.songId;\n  const {name, duration, date} = req.body;\n\n  const songUpdateQuery =\n    'UPDATE `Song` SET `name` = ?, `duration` = ?, `date` = ? WHERE `song_id` = ? ';\n  db.query(songUpdateQuery, [name, duration, date, songId], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Song ${songId} successfully updated`)\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * DELETE /api/song/songId\n * Deletes the song from Song table with specified id\n */\nroutes.delete('/:songId', (req, response) => {\n  console.log('DELETE /api/songs/:songId invoked');\n  const songId = req.params.songId;\n\n  const songDeleteQuery = 'DELETE FROM `Song` WHERE `song_id`= ?';\n  db.query(songDeleteQuery, songId, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;","const routes = require('express').Router();\nconst db = require('../db');\n\n// CREATES a new genre given a genre name\nroutes.post('/', (req, response) => {\n  console.log('POST /api/genres/ invoked: adding a new genre to table');\n  console.log(req.body);\n  const { name } = req.body;\n\n  const genreInsertQuery = 'INSERT INTO `Genre` (`name`) VALUES (?)';\n  db.query(genreInsertQuery, name, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n// REMOVES a genre with the given genreId\nroutes.delete('/:genreId', (req, response) => {\n  console.log('DELETE /api/genres/:genreId invoked');\n  const genreId = req.params.genreId;\n\n  const genreDeleteQuery = 'DELETE FROM `Genre` WHERE `genre_id`= ?';\n  db.query(genreDeleteQuery, genreId, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n// UPDATES a genre with the given genreId\nroutes.put('/:genreId', (req, response) => {\n  console.log('PUT /api/genres/:genreId invoked');\n  console.log(req.body);\n  const genreId = req.params.genreId;\n  const { name } = req.body;\n\n  const genreUpdateQuery =\n    'UPDATE `Genre` SET `name` = ? WHERE `genre_id` = ? ';\n  db.query(genreUpdateQuery, [name, genreId], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Genre ${genreId} successfully updated`);\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n// GETS a genre with the given genre name\nroutes.get('/:limit', (req, response) => {\n  console.log('GET /api/genres/:limit invoked');\n  const nameQuery = req.query.q;\n  console.log('name of genre we want is ', nameQuery);\n  const limit = req.params.limit;\n  const genreSelectQuery = `\n        SELECT * \n        FROM Genre \n        ${nameQuery === undefined ? '' : `WHERE name LIKE '%${nameQuery}%'`}\n        ORDER BY Genre.name ASC\n        ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n    `;\n  db.query(genreSelectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} genres`);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * Queries MySQL database\n * @param {String} query SQL query\n * @param {Object} response response to send to client\n */\nfunction queryDb(query, response) {\n  db.query(query, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} results`);\n      response.status(200).send(result);\n    }\n  });\n}\n\n/**\n * GET /api/matchmaking/UserSong/:limit/:userid\n *\n * Get the 50 users who “liked” the most amount of similar SONGS as current user\n */\nroutes.get('/UserSong/:limit/:userId', (req, response) => {\n  console.log('GET /:UserSong:limit:userId invoked');\n  const limit = req.params.limit;\n  const userId = req.params.userId;\n\n  const query = `\n    SELECT COUNT(*) as num_similar_songs, User.user_id, User.first_name, User.last_name, User.email, User.dob\n    FROM (\n        SELECT UserSong.user_id, UserSong.song_id\n        FROM UserSong\n        WHERE UserSong.song_id IN (\n            SELECT UserSong.song_id\n            FROM UserSong\n            WHERE UserSong.user_id = ${userId}\n        ) \n    ) u JOIN User ON User.user_id = u.user_id\n    GROUP BY u.user_id\n    HAVING u.user_id != ${userId}\n    ORDER BY num_similar_songs DESC   \n    LIMIT ${limit}  \n  `;\n\n  queryDb(query, response);\n});\n\n/**\n * GET /api/matchmaking/UserGenre/:limit/:userid\n *\n * Get the 50 users who “liked” the most amount of similar GENRES as current user\n */\nroutes.get('/UserGenre/:limit/:userId', (req, response) => {\n  console.log('GET /:UserGenre:limit:userId invoked');\n  const limit = req.params.limit;\n  const userId = req.params.userId;\n\n  const query = `\n        SELECT COUNT(*) as num_similar_genres, User.user_id, User.first_name, User.last_name, User.email, User.dob\n        FROM (\n            SELECT UserGenre.user_id, UserGenre.genre_id\n            FROM UserGenre\n            WHERE UserGenre.genre_id IN (\n                SELECT UserGenre.genre_id\n                FROM UserGenre\n                WHERE UserGenre.user_id = ${userId}\n            ) \n        ) u JOIN User ON User.user_id = u.user_id\n        GROUP BY u.user_id\n        HAVING u.user_id != ${userId}\n        ORDER BY num_similar_genres DESC\n        LIMIT ${limit}\n    `;\n\n  queryDb(query, response);\n});\n\n/**\n * GET /api/matchmaking/UserArtist/:limit/:userid\n *\n * Get the 50 users who “liked” the most amount of similar ARTISTS as current user\n */\nroutes.get('/UserArtist/:limit/:userId', (req, response) => {\n  console.log('GET /:UserArtist:limit:userId invoked');\n  const limit = req.params.limit;\n  const userId = req.params.userId;\n\n  const query = `\n        SELECT COUNT(*) as num_similar_artists, User.user_id, User.first_name, User.last_name, User.email, User.dob\n        FROM (\n            -- selects all users that have liked artists that the given user 1 has liked\n            SELECT UserArtist.user_id, UserArtist.artist_id\n            FROM UserArtist\n            WHERE UserArtist.artist_id IN (\n                SELECT UserArtist.artist_id\n                FROM UserArtist\n                WHERE UserArtist.user_id = ${userId}\n            ) \n        ) u JOIN User ON User.user_id = u.user_id\n        GROUP BY u.user_id\n        HAVING u.user_id != ${userId}\n        ORDER BY num_similar_artists DESC\n        LIMIT ${limit}\n    `;\n\n  queryDb(query, response);\n});\n\n/**\n * Calls a stored procedure that runs three advanced queries to find the\n * shared \"liked\" songs, artists, and genres between two users\n *\n * This creates and returns THREE different tables (the result of three select statements in one procedure)\n * 1) SharedArtists (has one column, \"artisto\")\n * 2) SharedGenres (has one column, \"genreo\")\n * 3) SharedSongs (has one column, \"songo\")\n */\nroutes.get('/shared/:limit/:userId1/:userId2', (req, response) => {\n  console.log('GET /shared/:limit/:userId/:userId2 invoked');\n  const userId1 = req.params.userId1;\n  const userId2 = req.params.userId2;\n\n  // the name of the procedure is \"trial\"\n  const query = `\n        CALL trial(${userId1}, ${userId2});\n    `;\n\n  queryDb(query, response);\n});\n\n/**\n * GET /api/user_user/:limit\n * Returns array of UserUser relations limited by the parameter\n * ex. /api/user_user/30\n *\n * Including a non-number as limit should(?) return ALL user-artist relations\n * ex. /api/user_user/all\n */\n routes.get('/user_user/:limit', (req, response) => {\n  console.log('GET /api/user_artist/:limit invoked');\n  const user1IdQuery = req.query.user1IdQuery;\n  const user2IdQuery = req.query.user2IdQuery;\n\n  let whereClause = '';\n  if (user1IdQuery !== undefined) {\n    whereClause += `WHERE user_1_id LIKE '${user1IdQuery}'`;\n  }\n  if (user2IdQuery !== undefined) {\n    whereClause += `${\n      Boolean(whereClause) ? 'AND' : 'WHERE'\n    } user_2_id LIKE '${user2IdQuery}'`;\n  }\n\n  const limit = req.params.limit;\n  const selectQuery = `\n\t\t  SELECT * \n\t\t  FROM UserUser \n\t\t  ${whereClause}\n\t\t  ORDER BY user_user_id DESC\n\t\t  ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t  `;\n  \n  console.log(selectQuery);\n  db.query(selectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} results`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n\n/**\n * Inserts a row into the UserUser table. Assumes that userId1 liked userId2.\n */\nroutes.post('/user_user', (req, response) => {\n  console.log('POST /api/user_user invoked');\n  console.log(req.body);\n  const { userId1, userId2 } = req.body;\n\n  const userInsertQuery =\n    'INSERT INTO `UserUser` (`user_1_id`, `user_2_id`) VALUES (?, ?)';\n  db.query(userInsertQuery, [userId1, userId2], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\n/**\n * DELETE /api/user_user\n * Deletes the user to user relationship from UserUser table with specified ids\n */\nroutes.delete('/user_user', (req, response) => {\n  console.log('DELETE /api/user_user invoked');\n  const { userId1, userId2 } = req.body;\n\n  const userDeleteQuery =\n    'DELETE FROM `UserUser` WHERE `user_id_1`= ? AND `user_id_2` = ?';\n  db.query(userDeleteQuery, [userId1, userId2], (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;\n","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/song_genre/:limit\n * Returns array of song_genre relations\n * ex. /api/song_genre/30\n *\n * Including a non-number as limit should(?) return ALL song_genre relations\n * ex. /api/song_genre/all\n */\n routes.get('/:limit', (req, response) => {\n\tconsole.log('GET /api/song_genre/:limit invoked');\n\tconst songIdQuery = req.query.songIdQuery;\n\tconst genreIdQuery = req.query.genreIdQuery;\n  \n\tlet whereClause = '';\n\tif (songIdQuery !== undefined) {\n\t  whereClause += `WHERE song_id LIKE '${songIdQuery}'`;\n\t}\n\tif (genreIdQuery !== undefined) {\n\t  whereClause += `${\n\t\tBoolean(whereClause) ? 'AND' : 'WHERE'\n\t  } genre_id LIKE '${genreIdQuery}'`;\n\t}\n  \n\tconst limit = req.params.limit;\n\tconst selectQuery = `\n\t\t\tSELECT * \n\t\t\tFROM SongGenre \n\t\t\t${whereClause}\n\t\t\tORDER BY song_genre_id DESC\n\t\t\t${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t\t`;\n\t\n\tconsole.log(selectQuery);\n\tdb.query(selectQuery, (err, result) => {\n\t  if (err) {\n\t\tconsole.error(err);\n\t\tresponse.status(500).send(err);\n\t  } else {\n\t\tconsole.log(`Success, sent ${result.length} users`);\n\t\tresponse.status(200).send(result);\n\t  }\n\t});\n  });\n  \n  module.exports = routes;\n  ","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/artist_genre/:limit\n * Returns array of artist_genre relations\n * ex. /api/artist_genre/30\n *\n * Including a non-number as limit should(?) return ALL artist_genre relations\n * ex. /api/artist_genre/all\n */\n routes.get('/:limit', (req, response) => {\n\tconsole.log('GET /api/artist_genre/:limit invoked');\n\tconst artistIdQuery = req.query.artistIdQuery;\n\tconst genreIdQuery = req.query.genreIdQuery;\n  \n\tlet whereClause = '';\n\tif (artistIdQuery !== undefined) {\n\t  whereClause += `WHERE artist_id LIKE '${artistIdQuery}'`;\n\t}\n\tif (genreIdQuery !== undefined) {\n\t  whereClause += `${\n\t\tBoolean(whereClause) ? 'AND' : 'WHERE'\n\t  } genre_id LIKE '${genreIdQuery}'`;\n\t}\n  \n\tconst limit = req.params.limit;\n\tconst selectQuery = `\n\t\t\tSELECT * \n\t\t\tFROM ArtistGenre \n\t\t\t${whereClause}\n\t\t\tORDER BY artist_genre_id DESC\n\t\t\t${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t\t`;\n\t\n\tconsole.log(selectQuery);\n\tdb.query(selectQuery, (err, result) => {\n\t  if (err) {\n\t\tconsole.error(err);\n\t\tresponse.status(500).send(err);\n\t  } else {\n\t\tconsole.log(`Success, sent ${result.length} users`);\n\t\tresponse.status(200).send(result);\n\t  }\n\t});\n  });\n  \n  module.exports = routes;\n  ","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/artist_song/:limit\n * Returns array of artist_song relations\n * ex. /api/artist_song/30\n *\n * Including a non-number as limit should(?) return ALL artist_song relations\n * ex. /api/artist_song/all\n */\n routes.get('/:limit', (req, response) => {\n\tconsole.log('GET /api/artist_song/:limit invoked');\n\tconst artistIdQuery = req.query.artistIdQuery;\n\tconst songIdQuery = req.query.songIdQuery;\n  \n\tlet whereClause = '';\n\tif (artistIdQuery !== undefined) {\n\t  whereClause += `WHERE artist_id LIKE '${artistIdQuery}'`;\n\t}\n\tif (songIdQuery !== undefined) {\n\t  whereClause += `${\n\t\tBoolean(whereClause) ? 'AND' : 'WHERE'\n\t  } song_id LIKE '${songIdQuery}'`;\n\t}\n  \n\tconst limit = req.params.limit;\n\tconst selectQuery = `\n\t\t\tSELECT * \n\t\t\tFROM ArtistSong \n\t\t\t${whereClause}\n\t\t\tORDER BY artist_song_id DESC\n\t\t\t${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t\t`;\n\t\n\tconsole.log(selectQuery);\n\tdb.query(selectQuery, (err, result) => {\n\t  if (err) {\n\t\tconsole.error(err);\n\t\tresponse.status(500).send(err);\n\t  } else {\n\t\tconsole.log(`Success, sent ${result.length} users`);\n\t\tresponse.status(200).send(result);\n\t  }\n\t});\n  });\n  \n  module.exports = routes;\n  ","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/user_genre/:limit\n * Returns array of user_genre relations limited by the parameter\n * ex. /api/user_genre/30\n *\n * Including a non-number as limit should(?) return ALL user-genres\n * ex. /api/user_genre/all\n */\nroutes.get('/:limit', (req, response) => {\n  console.log('GET /api/user_genre/:limit invoked');\n  const userIdQuery = req.query.userIdQuery;\n  const genreIdQuery = req.query.genreIdQuery;\n\n  let whereClause = '';\n  if (userIdQuery !== undefined) {\n    whereClause += `WHERE user_id LIKE '${userIdQuery}'`;\n  }\n  if (genreIdQuery !== undefined) {\n    whereClause += `${\n      Boolean(whereClause) ? 'AND' : 'WHERE'\n    } genre_id LIKE '${genreIdQuery}'`;\n  }\n\n  const limit = req.params.limit;\n  const selectQuery = `\n\t\t  SELECT * \n\t\t  FROM UserGenre \n\t\t  ${whereClause}\n\t\t  ORDER BY user_genre_id DESC\n\t\t  ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t  `;\n  \n  console.log(selectQuery);\n  db.query(selectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} users`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n\n/**\n * POST /api/user_genre\n * Inserts user_genre into UserGenre table using values in request body\n * Request body must have a `userId` and 'genreId'\n */\n routes.post('/', (req, response) => {\n  console.log('POST /api/user_genre/ invoked');\n  console.log(req.body);\n  const { user_id: userId, genre_id: genreId } = req.body;\n\n  const userGenreInsertQuery =\n    'INSERT INTO `UserGenre` (`user_id`, `genre_id`) VALUES (?,?)';\n  db.query(\n    userGenreInsertQuery,\n    [userId, genreId],\n    (err, result) => {\n      if (err) {\n        console.error(err);\n        response.status(500).send(err);\n      } else {\n        console.log(result);\n        response.status(200).send(result);\n      }\n    }\n  );\n});\n\n/**\n * DELETE /api/user_genre/\n * Deletes the user-genre relation from UserGenre table with specified userId and genreId\n */\nroutes.delete('/', (req, response) => {\n  console.log('DELETE /api/user_genre/ invoked');\n  const userIdQuery = req.query.userIdQuery;\n  const genreIdQuery = req.query.genreIdQuery;\n\n  if (userIdQuery === undefined || genreIdQuery === undefined) {\n\t  return response.status(500).send();\n  }\n\n  const userGenreDeleteQuery = 'DELETE FROM `UserGenre` WHERE `user_id`= ? AND `genre_id`= ?';\n  db.query(\n\t  userGenreDeleteQuery, \n\t  [userIdQuery, genreIdQuery], \n\t  (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;\n","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/user_song/:limit\n * Returns array of user_song relations limited by the parameter\n * ex. /api/user_song/30\n *\n * Including a non-number as limit should(?) return ALL user-song relations\n * ex. /api/user_song/all\n */\nroutes.get('/:limit', (req, response) => {\n  console.log('GET /api/user_song/:limit invoked');\n  const userIdQuery = req.query.userIdQuery;\n  const songIdQuery = req.query.songIdQuery;\n\n  let whereClause = '';\n  if (userIdQuery !== undefined) {\n    whereClause += `WHERE user_id LIKE '${userIdQuery}'`;\n  }\n  if (songIdQuery !== undefined) {\n    whereClause += `${\n      Boolean(whereClause) ? 'AND' : 'WHERE'\n    } song_id LIKE '${songIdQuery}'`;\n  }\n\n  const limit = req.params.limit;\n  const selectQuery = `\n\t\t  SELECT * \n\t\t  FROM UserSong \n\t\t  ${whereClause}\n\t\t  ORDER BY user_song_id DESC\n\t\t  ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t  `;\n  \n  console.log(selectQuery);\n  db.query(selectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} users`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n\n/**\n * POST /api/user_song\n * Inserts user_song into UserSong table using values in request body\n * Request body must have a `userId` and 'songId'\n */\n routes.post('/', (req, response) => {\n  console.log('POST /api/user_song/ invoked');\n  console.log(req.body);\n  const { user_id: userId, song_id: songId } = req.body;\n\n  const userSongInsertQuery =\n    'INSERT INTO `UserSong` (`user_id`, `song_id`) VALUES (?,?)';\n  db.query(\n    userSongInsertQuery,\n    [userId, songId],\n    (err, result) => {\n      if (err) {\n        console.error(err);\n        response.status(500).send(err);\n      } else {\n        console.log(result);\n        response.status(200).send(result);\n      }\n    }\n  );\n});\n\n/**\n * DELETE /api/user_song/\n * Deletes the user-song relation from UserSong table with specified userId and songId\n */\nroutes.delete('/', (req, response) => {\n  console.log('DELETE /api/user_song/ invoked');\n  const userIdQuery = req.query.userIdQuery;\n  const songIdQuery = req.query.songIdQuery;\n\n  if (userIdQuery === undefined || songIdQuery === undefined) {\n\t  return response.status(500).send();\n  }\n\n  const userSongDeleteQuery = 'DELETE FROM `UserSong` WHERE `user_id`= ? AND `song_id`= ?';\n  db.query(\n\t  userSongDeleteQuery, \n\t  [userIdQuery, songIdQuery], \n\t  (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;\n","const routes = require('express').Router();\nconst db = require('../db');\n\n/**\n * GET /api/user_artist/:limit\n * Returns array of user_artist relations limited by the parameter\n * ex. /api/user_artist/30\n *\n * Including a non-number as limit should(?) return ALL user-artist relations\n * ex. /api/user_artist/all\n */\nroutes.get('/:limit', (req, response) => {\n  console.log('GET /api/user_artist/:limit invoked');\n  const userIdQuery = req.query.userIdQuery;\n  const artistIdQuery = req.query.artistIdQuery;\n\n  let whereClause = '';\n  if (userIdQuery !== undefined) {\n    whereClause += `WHERE user_id LIKE '${userIdQuery}'`;\n  }\n  if (artistIdQuery !== undefined) {\n    whereClause += `${\n      Boolean(whereClause) ? 'AND' : 'WHERE'\n    } artist_id LIKE '${artistIdQuery}'`;\n  }\n\n  const limit = req.params.limit;\n  const selectQuery = `\n\t\t  SELECT * \n\t\t  FROM UserArtist \n\t\t  ${whereClause}\n\t\t  ORDER BY user_artist_id DESC\n\t\t  ${Boolean(limit) && !isNaN(limit) ? `LIMIT ${limit}` : ''}\n\t  `;\n  \n  console.log(selectQuery);\n  db.query(selectQuery, (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(`Success, sent ${result.length} users`);\n      response.status(200).send(result);\n    }\n  });\n});\n\n\n/**\n * POST /api/user_artist\n * Inserts user_artist into UserArtist table using values in request body\n * Request body must have a `userId` and 'artistId'\n */\n routes.post('/', (req, response) => {\n  console.log('POST /api/user_artist/ invoked');\n  console.log(req.body);\n  const { user_id: userId, artist_id: artistId } = req.body;\n\n  const userArtistInsertQuery =\n    'INSERT INTO `UserArtist` (`user_id`, `artist_id`) VALUES (?,?)';\n  db.query(\n    userArtistInsertQuery,\n    [userId, artistId],\n    (err, result) => {\n      if (err) {\n        console.error(err);\n        response.status(500).send(err);\n      } else {\n        console.log(result);\n        response.status(200).send(result);\n      }\n    }\n  );\n});\n\n/**\n * DELETE /api/user_artist/\n * Deletes the user-artist relation from UserArtist table with specified userId and artistId\n */\nroutes.delete('/', (req, response) => {\n  console.log('DELETE /api/user_artist/ invoked');\n  const userIdQuery = req.query.userIdQuery;\n  const artistIdQuery = req.query.artistIdQuery;\n\n  if (userIdQuery === undefined || artistIdQuery === undefined) {\n\t  return response.status(500).send();\n  }\n\n  const userArtistDeleteQuery = 'DELETE FROM `UserArtist` WHERE `user_id`= ? AND `artist_id`= ?';\n  db.query(\n\t  userArtistDeleteQuery, \n\t  [userIdQuery, artistIdQuery], \n\t  (err, result) => {\n    if (err) {\n      console.error(err);\n      response.status(500).send(err);\n    } else {\n      console.log(result);\n      response.status(200).send(result);\n    }\n  });\n});\n\nmodule.exports = routes;\n"],"sourceRoot":""}